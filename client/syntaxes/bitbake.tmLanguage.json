{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "scopeName": "source.bb",
    "name": "BitBake",
    "fileTypes": [
        "bb",
        "bbappend",
        "bbclass",
        "inc"
    ],
    "patterns": [
        {
            "include": "#escaped-single-quote"
        },
        {
            "include": "#escaped-double-quote"
        },
        {
            "include": "#string"
        },
        {
            "include": "#numeric"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#comment"
        },
        {
            "include": "#inline-python"
        },
        {
            "include": "#variable-expansion"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#bitbake-operator"
        },
        {
            "include": "#variable-name"
        },
        {
            "include": "#operator"
        }
    ],
    "repository": {
        "keywords": {
            "patterns": [
                {
                    "match": "(?<![[:punct:]])\\b(include|require|inherit|inherit_defer|addtask|deltask|after|before|export|echo|if|fi|unset|print|fakeroot|EXPORT_FUNCTIONS|INHERIT)\\b(?![[:punct:]])",
                    "captures": {
                        "1": {
                            "name": "keyword.control.bb"
                        }
                    }
                },
                {
                    "include": "#python-keywords"
                },
                {
                    "match": "\\b(python|def)\\b(?![[:punct:]])",
                    "captures": {
                        "1": {
                            "name": "storage.type.function.python.bb"
                        }
                    }
                }
            ]
        },
        "python-keywords": {
            "patterns": [
                {
                    "match": "\\b(if|elif|else|for|while|break|continue|return|yield|try|except|finally|raise|assert|import|from|as|pass|del|with|async|await)\\b",
                    "captures": {
                        "1": {
                            "name": "keyword.control.bb"
                        }
                    }
                },
                {
                    "match": "\\b(def|class|global|nonlocal|and|or|not|in|is|lambda)\\b\\s+",
                    "captures": {
                        "1": {
                            "name": "storage.type.function.python.bb"
                        }
                    }
                },
                {
                    "match": "\\b(True|False)\\b",
                    "name": "constant.language.python.bb"
                }
            ]
        },
        "numeric": {
            "match": "(-|\\.)?[0-9]+(\\.[0-9]+)?",
            "name": "constant.numeric.bb"
        },
        "string": {
            "patterns": [
                {
                    "name": "string.quoted.triple.bb",
                    "begin": "(\"\"\")",
                    "end": "(\"\"\")",
                    "patterns": [
                        {
                            "include": "#escaped-single-quote"
                        },
                        {
                            "include": "#escaped-double-quote"
                        },
                        {
                            "include": "#inline-python"
                        },
                        {
                            "include": "#variable-expansion"
                        }
                    ]
                },
                {
                    "name": "string.quoted.double.bb",
                    "begin": "(\")",
                    "end": "(\")",
                    "patterns": [
                        {
                            "include": "#escaped-double-quote"
                        },
                        {
                            "include": "#inline-python"
                        },
                        {
                            "include": "#variable-expansion"
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.bb",
                    "begin": "(')",
                    "end": "(')",
                    "patterns": [
                        {
                            "include": "#escaped-single-quote"
                        },
                        {
                            "include": "#inline-python"
                        },
                        {
                            "include": "#variable-expansion"
                        }
                    ]
                }
            ]
        },
        "comment": {
            "match": "(\\s*)((#)(.*))\\n",
            "captures": {
                "1": {
                    "name": "punctuation.whitespace.comment.leading.bb"
                },
                "2": {
                    "name": "comment.line.bb"
                },
                "3": {
                    "name": "comment.line.number-sign.bb"
                },
                "4": {
                    "name": "comment.line.text.bb"
                }
            }
        },
        "functions": {
            "match": "([a-zA-Z_][\\w_]*)(:([a-zA-Z_][\\w_]*))?(?=\\s*\\()",
            "captures": {
                "1": {
                    "name": "entity.name.function.python.bb"
                },
                "2": {
                    "name": "keyword.operator.bb"
                },
                "3": {
                    "name": "keyword.other.bitbake-operator.bb"
                }
            }
        },
        "variable-expansion": {
            "name": "variable.other.names.bb",
            "begin": "(\\$\\{)",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.template-expression.begin.bb"
                }
            },
            "end": "(\\})",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.template-expression.end.bb"
                }
            }
        },
        "inline-python": {
            "begin": "(\\$\\{(@))",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.template-expression.end.bb"
                },
                "2": {
                    "name": "entity.name.function.decorator.python.bb"
                }
                
            },
            "end": "(\\})",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.template-expression.end.bb"
                }
            },
            "patterns": [
                {
                    "include": "#operator"
                },
                {
                    "include": "#keywords"
                },
                {
                    "match": "(\\[)",
                    "name": "meta.embedded.brackets.begin.bb"
                },
                {
                    "match": "(\\])",
                    "name": "meta.embedded.brackets.end.bb"
                },
                {
                    "include": "#numeric"
                },
                {
                    "include": "#functions"
                },
                {
                    "include": "#parenthesis-open"
                },
                {
                    "include": "#parenthesis-close"
                },
                {
                    "include": "#variable-name"
                },
                {
                    "include": "#string"
                }
            ]
        },
        "variable-name": {
            "match": "([a-zA-Z_][\\w_]*)",
            "captures": {
                "1": {
                    "name": "variable.other.names.bb"
                }
            }
        },
        "operator": {
            "match": "(=|\\?=|\\?\\?=|:=|\\+=|=\\+|\\.=|=\\.|\\.|,)",
            "name": "keyword.operator.bb"
        },
        "bitbake-operator": {
            "match": "(?<=:)(append|prepend|remove)",
            "name": "keyword.control.bb"
        },
        "parenthesis-open": {
            "match": "([\\w])*\\(",
            "name": "meta.embedded.parenthesis.open.bb"
        },
        "parenthesis-close": {
            "match": "\\)",
            "name": "meta.embedded.parenthesis.close.bb"
        },
        "escaped-single-quote":{
            "match": "\\\\'",
            "name": "constant.character.escape.bb"
        },
        "escaped-double-quote":{
            "match": "\\\\\"",
            "name": "constant.character.escape.bb"
        }
    }
}