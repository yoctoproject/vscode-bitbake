{
  "name": "yocto-bitbake",
	"displayName": "Yocto Project BitBake",
  "description": "Extended Yocto Project and BitBake language support",
  "author": {
    "name": "Savoir-faire Linux",
    "email": "contact@savoirfairelinux.com",
    "url": "https://www.savoirfairelinux.com/"
  },
  "contributors": [
    "Eugen Wiens"
  ],
  "license": "MIT",
  "version": "2.1.0",
  "publisher": "yocto-project",
  "icon": "images/icon.png",
  "bugs": {
    "url": "https://github.com/yoctoproject/vscode-bitbake/issues"
  },
  "homepage": "https://github.com/yoctoproject/vscode-bitbake/",
  "repository": {
    "type": "git",
    "url": "https://github.com/yoctoproject/vscode-bitbake.git"
  },
  "engines": {
    "vscode": "^1.75.0"
  },
  "extensionDependencies": [
    "mads-hartmann.bash-ide-vscode",
    "ms-python.python"
  ],
  "categories": [
    "Programming Languages"
  ],
  "activationEvents": [],
  "main": "./out/extension",
  "contributes": {
    "languages": [
      {
        "id": "bitbake",
        "aliases": [
          "BitBake",
          "bitbake"
        ],
        "extensions": [
          ".bb",
          ".bbappend",
          ".inc",
          ".bbclass",
          ".conf"
        ],
        "configuration": "./language-configuration.json",
        "icon": {
          "dark": "images/yocto-file-icon.svg",
          "light": "images/yocto-file-icon.svg"
        }
      }
    ],
    "grammars": [
      {
        "language": "bitbake",
        "scopeName": "source.bb",
        "path": "./syntaxes/bitbake.tmLanguage.json"
      }
    ],
    "semanticTokenScopes": [
      {
        "language": "bitbake",
        "scopes": {
          "operator.readonly": ["keyword.other.bitbake-operator.bb"]
        }
      }
    ],
    "configuration": {
      "type": "object",
      "title": "BitBake",
      "properties": {
        "bitbake.loggingLevel": {
          "type": "string",
          "enum": [
            "error",
            "info",
            "debug"
          ],
          "default": "error",
          "markdownDescription": "Adjust the logging level: `error` for reporting only errors, `info` for displaying information useful to the user, and `debug` for the same information as `info,` but with additional debugging details."
        },
        "bitbake.shouldDeepExamine": {
          "type": "boolean",
          "default": false,
          "description": "Activate deep examination. If a recipe exports an additional package with a different name than the recipe file, the normal scan will not detect these packages. To find these packages, you need to activate this option."
        },
        "bitbake.parseOnSave": {
          "type": "boolean",
          "default": true,
          "description": "Activate parsing on save. When a recipe is saved, bitbake will automatically be run to parse it."
        },
        "bitbake.eSDKMode": {
          "type": "boolean",
          "default": false,
          "deprecationMessage": "eSDK mode is now automatically detected. This setting is deprecated and will be removed in a future release.",
          "markdownDescription": "Activate eSDK only mode. This tells the extension that devtool is available but not bitbake, which will disable unavailable features. You should point the `bitbake.pathToEnvScript` setting to the environment script of the eSDK."
        },
        "bitbake.pathToEnvScript": {
          "type": "string",
          "examples": ["${workspaceFolder}/sources/poky/oe-init-build-env"],
          "markdownDescription": "Set the path to the environment script to configure the BitBake project. _(Optional)_, see the commandWrapper setting.\n\nExample: `${workspaceFolder}/sources/poky/oe-init-build-env`"
        },
        "bitbake.pathToBuildFolder": {
          "type": "string",
          "examples": ["${workspaceFolder}/build"],
          "description": "Set the build folder for the BitBake project. _(Optional)_, see the commandWrapper setting.\n\nExample: '${workspaceFolder}/build'"
        },
        "bitbake.pathToBitbakeFolder": {
          "type": "string",
          "default": "${workspaceFolder}/sources/poky/bitbake",
          "description": "Set the path to the BitBake folder. Used to provide Python embedded language features."
        },
        "bitbake.commandWrapper": {
          "type": "string",
          "examples": [
            "docker run --rm -v ${workspaceFolder}:${workspaceFolder} crops/poky --workdir=${workspaceFolder} /bin/bash -c",
            "kas shell -c",
            "cqfd run",
            "${workspaceFolder}/build.sh --"
          ],
          "markdownDescription": "An optional build tool command to wrap around BitBake commands.\n\nVarious tools provide ways to automatically configure the BitBake environment, or even call it inside containers. This option allows you to use them through this extension by wrapping around the bitbake invocation.\n\nThe resulting commands generated by this extension will be for example:\n\n `$ <commandWrapper> 'bitbake core-image-minimal'`\n\n `$ <commandWrapper> '. <pathToEnvScript> <pathToBuildFolder> && bitbake core-image-minimal'`\n\nSee examples:\n\n`docker run --rm -v ${workspaceFolder}:${workspaceFolder} crops/poky --workdir=${workspaceFolder} /bin/bash -c`\n\n`kas shell -c`\n\n`cqfd run`\n\n`${workspaceFolder}/build.sh --`\n\nNote: Relative paths must be relative to the workingDirectory folder, where the command will be run."
        },
        "bitbake.workingDirectory": {
          "type": "string",
          "default": "${workspaceFolder}",
          "description": "Set the working directory for running BitBake command."
        },
        "bitbake.shellEnv": {
          "type": "object",
          "default": {},
          "description": "Environment variables to set before running the BitBake command.",
          "examples": [
            {
              "BB_ENV_PASSTHROUGH": "SSTATE_DIR",
              "SSTATE_DIR": "/mnt/yocto-sstate-cache"
            }
          ]
        },
        "bitbake.sshTarget": {
          "type": "string",
          "markdownDescription": "Hostname or IP address of the SSH target for deploying recipes or SDK builds to a remote target. _(Optional)_\n\nExample: `root@192.168.0.50`\n\nAdditional SSH options must be defined through your SSH configuration file (`~/.ssh/config`).",
          "examples": [
            "root@192.168.0.50"
          ]
        },
        "bitbake.sdkImage": {
          "type": "string",
          "markdownDescription": "SDK image to use for cross-compilation and debugging.\n\nExample: `core-image-minimal`",
          "examples": "core-image-minimal"
        }
      }
    },
    "taskDefinitions": [
      {
        "type": "bitbake",
        "properties": {
          "recipes": {
            "description": "Bitbake recipe(s)",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "task": {
            "type": "string",
            "description": "Bitbake task to run (build by default)"
          },
          "options": {
            "type": "object",
            "description": "Additional options to pass to the bitbake command",
            "properties": {
              "continue": {
                "type": "boolean",
                "description": "Continue as much as possible after an error (-k)"
              },
              "force": {
                "type": "boolean",
                "description": "Force the specified targets/task to run (-f)."
              },
              "parseOnly": {
                "type": "boolean",
                "description": "Run bitbake in parse-only mode (-p)."
              }
            }
          },
          "specialCommand": {
            "type": "string",
            "description": "Special command to run instead of bitbake. Intended for internal use by the extension.",
            "pattern": "^devtool\\s.*$"
          }
        }
      }
    ],
    "problemMatchers": [
      {
        "name": "bitbake-ParseError",
        "source": "bitbake",
        "owner": "bitbake",
        "fileLocation": [
          "autoDetect",
          "${cwd}"
        ],
        "pattern": [
          {
            "regexp": "^.*ParseError (at|in) (.+?):(\\d+)?:? (unparsed line: '(.+)')$",
            "file": 2,
            "line": 3,
            "message": 4,
            "code": 5,
            "column": 0
          }
        ]
      },
      {
        "name": "bitbake-UnableToParse",
        "source": "bitbake",
        "owner": "bitbake",
        "fileLocation": [
          "autoDetect",
          "${cwd}"
        ],
        "pattern": {
          "regexp": "(ERROR): (Unable to parse (.+))$",
          "severity": 1,
          "file": 3,
          "message": 2,
          "kind": "File"
        }
      },
      {
        "name": "bitbake-Variable",
        "source": "bitbake",
        "owner": "bitbake",
        "fileLocation": [
          "autoDetect",
          "${cwd}"
        ],
        "pattern": {
          "regexp": "(^Parsing recipes...)?(ERROR): (.+?): (.*?) file: (.+) line: (\\d+) (.*)$",
          "file": 2,
          "line": 5,
          "severity": 1,
          "message": 6
        }
      },
      {
        "name": "bitbake-non-existent-uri",
        "source": "bitbake",
        "owner": "bitbake",
        "fileLocation": [
          "autoDetect",
          "${cwd}"
        ],
        "pattern": {
          "regexp": "(ERROR): (.+?): (.*non-existent-uri: file could not be found)$",
          "file": 2,
          "severity": 1,
          "message": 3
        }
      },
      {
        "name": "bitbake-compilation-python-function",
        "source": "bitbake",
        "owner": "bitbake",
        "fileLocation": [
          "autoDetect",
          "${cwd}"
        ],
        "pattern": {
          "regexp": "(ERROR): (.+): (Error in compiling python function) in (.*), line (\\d+):$",
          "file": 2,
          "severity": 1,
          "line": 5,
          "message": 3
        }
      },
      {
        "name": "bitbake-execution-error",
        "source": "bitbake",
        "owner": "bitbake",
        "fileLocation": [
          "autoDetect",
          "${cwd}"
        ],
        "pattern": {
          "regexp": "(^Parsing recipes...)?(ERROR): (.+?): (.*):?$",
          "file": 3,
          "severity": 2,
          "message": 4
        }
      },
      {
        "name": "bitbake-task-error",
        "source": "bitbake",
        "owner": "bitbake",
        "fileLocation": [
          "autoDetect",
          "${cwd}"
        ],
        "pattern": {
          "regexp": "^(ERROR): Task \\((.*):(.*\\) .*)$",
          "file": 2,
          "message": 3,
          "severity": 1
        }
      }
    ],
    "commands": [
      {
        "command": "bitbake.rescan-project",
        "title": "BitBake: Rescan Project",
        "description": "This command rescans the bitbake project.",
        "icon": "$(refresh)"
      },
      {
        "command": "bitbake.build-recipe",
        "title": "BitBake: Build recipe",
        "description": "Build a recipe or an image.",
        "icon": "$(gear)"
      },
      {
        "command": "bitbake.clean-recipe",
        "title": "BitBake: Clean recipe",
        "description": "Clean a recipe or an image (bitbake -c clean).",
        "icon": "$(exclude)"
      },
      {
        "command": "bitbake.run-task",
        "title": "BitBake: Run task for recipe",
        "description": "Run a specific task for a bitbake recipe."
      },
      {
        "command": "bitbake.scan-recipe-env",
        "title": "BitBake: Scan Recipe",
        "description": "Run 'bitbake -e' on the chosen recipe to improve the language services such as hover definition"
      },
      {
        "command": "bitbake.drop-recipe",
        "title": "BitBake: Drop a recipe from the active workspace",
        "description": "Stop watching or suggesting a recipe in bitbake commands.",
        "icon": "$(close)"
      },
      {
        "command": "bitbake.watch-recipe",
        "title": "BitBake: Add a recipe to the active workspace",
        "icon": "$(add)",
        "description": "Start watching or suggesting a recipe in bitbake commands."
      },
      {
        "command": "bitbake.drop-all-recipes",
        "title": "BitBake: Drop all recipes from the active workspace",
        "description": "Clear all recipes in the recipes view and from all command suggestions.",
        "icon": "$(close)"
      },
      {
        "command": "bitbake.parse-recipes",
        "title": "BitBake: Parse all recipes",
        "description": "This command runs bitbake in parse-only mode."
      },
      {
        "command": "bitbake.devtool-modify",
        "title": "BitBake: Devtool: Modify recipe",
        "description": "Open a new devtool workspace to modify a recipe's sources."
      },
      {
        "command": "bitbake.devtool-ide-sdk",
        "title": "BitBake: Devtool: Configure VSCode SDK",
        "description": "Configure a devtool sources' workspace for cross-compilation and debugging."
      },
      {
        "command": "bitbake.devtool-sdk-fallback",
        "title": "BitBake: Devtool: Configure devtool SDK fallback",
        "description": "Configure a devtool sources' workspace to use `devtool build` and `devtool deploy-target` if `devtool ide-sdk` is not available."
      },
      {
        "command": "bitbake.devtool-open-workspace",
        "title": "BitBake: Devtool: Open Workspace",
        "description": "Open a devtool sources workspace in a new VSCode window.",
        "icon": "$(file-symlink-directory)"
      },
      {
        "command": "bitbake.devtool-reset",
        "title": "BitBake: Devtool: Reset",
        "description": "Remove a devtool workspace.",
        "icon": "$(trash)"
      },
      {
        "command": "bitbake.devtool-update",
        "title": "BitBake: Devtool: Update recipe",
        "description": "Update a recipe from a devtool workspace's modifications.",
        "icon": "$(save-as)"
      },
      {
        "command": "bitbake.devtool-build",
        "title": "Bitbake: Devtool: Build recipe",
        "description": "Build a recipe through devtool.",
        "icon": "$(gear)"
      },
      {
        "command": "bitbake.devtool-deploy",
        "title": "Bitbake: Devtool: Deploy recipe",
        "description": "Deploy a devtool package on an SSH target."
      },
      {
        "command": "bitbake.devtool-clean",
        "title": "BitBake: Devtool: Clean recipe",
        "description": "Clean a recipe using devtool.",
        "icon": "$(exclude)"
      },
      {
        "command": "bitbake.terminal-profile",
        "title": "BitBake: Open interactive terminal",
        "description": "Open an interactive terminal with the bitbake environment."
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "bitbakeView",
          "title": "Bitbake",
          "icon": "images/yocto-view-icon.svg"
        }
      ]
    },
    "views": {
      "bitbakeView": [
        {
          "id": "bitbakeRecipes",
          "name": "Recipes Explorer",
          "contextualTitle": "Recipes explorer",
          "icon": "$(library)",
          "when": "bitbake.active"
        },
        {
          "id": "devtoolWorkspaces",
          "name": "Devtool Workspaces",
          "contextualTitle": "Devtool workspaces",
          "icon": "$(symbol-property)",
          "when": "bitbake.active"
        }
      ]
    },
    "submenus": [
      {
        "id": "bitbake/main",
        "label": "BitBake"
      }
    ],
    "menus": {
      "bitbake/main": [
        {
          "command": "bitbake.clean-recipe",
          "group": "0@bitbake_recipe@1"
        },
        {
          "command": "bitbake.build-recipe",
          "group": "0@bitbake_recipe@0"
        },
        {
          "command": "bitbake.run-task",
          "group": "0@bitbake_recipe@2"
        },
        {
          "command": "bitbake.scan-recipe-env",
          "group": "0@bitbake_recipe@3"
        },
        {
          "command": "bitbake.terminal-profile",
          "group": "0@bitbake_recipe@3"
        },
        {
          "command": "bitbake.devtool-modify",
          "group": "1@bitbake_devtool@0"
        }
      ],
      "explorer/context": [
        {
          "submenu": "bitbake/main",
          "group": "bitbake",
          "when": "resourceLangId == bitbake"
        }
      ],
      "editor/context": [
        {
          "submenu": "bitbake/main",
          "group": "bitbake",
          "when": "editorLangId == bitbake"
        }
      ],
      "editor/title/context": [
        {
          "submenu": "bitbake/main",
          "group": "bitbake",
          "when": "resourceLangId == bitbake"
        }
      ],
      "view/title": [
        {
          "command": "bitbake.watch-recipe",
          "group": "navigation@0",
          "when": "view == bitbakeRecipes"
        },
        {
          "command": "bitbake.rescan-project",
          "group": "navigation@1",
          "when": "view == bitbakeRecipes"
        },
        {
          "command": "bitbake.drop-all-recipes",
          "group": "navigation@2",
          "when": "view == bitbakeRecipes"
        }
      ],
      "view/item/context": [
        {
          "command": "bitbake.clean-recipe",
          "group": "0@bitbake_recipe@1",
          "when": "viewItem == bitbakeRecipeCtx"
        },
        {
          "command": "bitbake.build-recipe",
          "group": "0@bitbake_recipe@0",
          "when": "viewItem == bitbakeRecipeCtx"
        },
        {
          "command": "bitbake.run-task",
          "group": "0@bitbake_recipe@2",
          "when": "viewItem == bitbakeRecipeCtx"
        },
        {
          "command": "bitbake.drop-recipe",
          "group": "0@bitbake_recipe@3",
          "when": "viewItem == bitbakeRecipeCtx"
        },
        {
          "command": "bitbake.terminal-profile",
          "group": "0@bitbake_recipe@4",
          "when": "viewItem == bitbakeRecipeCtx || viewItem == devtoolWorskpaceCtx"
        },
        {
          "command": "bitbake.build-recipe",
          "group": "inline@0",
          "when": "viewItem == bitbakeRecipeCtx"
        },
        {
          "command": "bitbake.clean-recipe",
          "group": "inline@1",
          "when": "viewItem == bitbakeRecipeCtx"
        },
        {
          "command": "bitbake.devtool-build",
          "group": "inline@0",
          "when": "viewItem == devtoolWorskpaceCtx"
        },
        {
          "command": "bitbake.drop-recipe",
          "group": "inline@2",
          "when": "viewItem == bitbakeRecipeCtx"
        },
        {
          "command": "bitbake.devtool-modify",
          "group": "1@bitbake_devtool@0",
          "when": "viewItem == bitbakeRecipeCtx"
        },
        {
          "command": "bitbake.devtool-open-workspace",
          "group": "1@bitbake_devtool@1",
          "when": "viewItem == devtoolWorskpaceCtx"
        },
        {
          "command": "bitbake.devtool-reset",
          "group": "1@bitbake_devtool@5",
          "when": "viewItem == devtoolWorskpaceCtx"
        },
        {
          "command": "bitbake.devtool-update",
          "group": "1@bitbake_devtool@4",
          "when": "viewItem == devtoolWorskpaceCtx"
        },
        {
          "command": "bitbake.devtool-ide-sdk",
          "group": "1@bitbake_devtool@2",
          "when": "viewItem == devtoolWorskpaceCtx"
        },
        {
          "command": "bitbake.devtool-sdk-fallback",
          "group": "1@bitbake_devtool@3",
          "when": "viewItem == devtoolWorskpaceCtx"
        },
        {
          "command": "bitbake.devtool-reset",
          "group": "inline@5",
          "when": "viewItem == devtoolWorskpaceCtx"
        },
        {
          "command": "bitbake.devtool-update",
          "group": "inline@4",
          "when": "viewItem == devtoolWorskpaceCtx"
        },
        {
          "command": "bitbake.devtool-build",
          "group": "0@bitbake_recipe@0",
          "when": "viewItem == devtoolWorskpaceCtx"
        },
        {
          "command": "bitbake.devtool-deploy",
          "group": "0@bitbake_recipe@2",
          "when": "viewItem == devtoolWorskpaceCtx"
        },
        {
          "command": "bitbake.devtool-clean",
          "group": "0@bitbake_recipe@1",
          "when": "viewItem == devtoolWorskpaceCtx"
        }
      ]
    },
    "terminal": {
      "profiles": [
        {
          "id": "bitbake.terminal",
          "title": "bitbake"
        }
      ]
    }
  },
  "scripts": {
    "test": "npm run test:grammar",
    "test:grammar": "vscode-tmgrammar-test ./test/grammars/test-cases/*.bb",
    "snap-grammar": "vscode-tmgrammar-snap ./test/grammars/snaps/*.bb -u",
    "vscode:prepublish": "npm install --omit=dev && cd ../server && npm install --omit=dev && npm run installServer",
    "package": "npm run vscode:prepublish && vsce package --target linux-x64 && vsce package --target linux-arm64 && vsce package --target linux-armhf && vsce package --target win32-x64 && vsce package --target win32-arm64"
  },
  "dependencies": {
    "find": "^0.2.7",
    "vscode-languageclient": "^8.1.0"
  },
  "devDependencies": {
    "@types/node": "^20.6.2",
    "@types/find": "^0.2.2",
    "@types/vscode": "^1.75.1"
  },
  "workspaces": [
    "src/lib"
  ],
  "vsce": {
    "baseContentUrl": "https://github.com/yoctoproject/vscode-bitbake/raw/HEAD/client",
    "baseImageUrl": "https://github.com/yoctoproject/vscode-bitbake/raw/HEAD/client"
  }
}
