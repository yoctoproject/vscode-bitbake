{
  "name": "yocto-bitbake",
	"displayName": "Yocto Project BitBake",
  "description": "Extended Yocto Project and BitBake language support",
  "author": {
    "name": "Savoir-faire Linux",
    "email": "contact@savoirfairelinux.com",
    "url": "https://www.savoirfairelinux.com/"
  },
  "contributors": [
    "Eugen Wiens"
  ],
  "license": "MIT",
  "version": "2.0.0",
  "publisher": "yocto-project",
  "icon": "images/icon.png",
  "bugs": {
    "url": "https://github.com/yoctoproject/vscode-bitbake/issues"
  },
  "homepage": "https://github.com/yoctoproject/vscode-bitbake/",
  "repository": {
    "type": "git",
    "url": "https://github.com/yoctoproject/vscode-bitbake.git"
  },
  "engines": {
    "vscode": "^1.75.0"
  },
  "extensionDependencies": [
    "mads-hartmann.bash-ide-vscode",
    "ms-python.python"
  ],
  "categories": [
    "Programming Languages"
  ],
  "activationEvents": [],
  "main": "./out/extension",
  "contributes": {
    "languages": [
      {
        "id": "bitbake",
        "aliases": [
          "BitBake",
          "bitbake"
        ],
        "extensions": [
          ".bb",
          ".bbappend",
          ".inc",
          ".bbclass",
          ".conf"
        ],
        "configuration": "./language-configuration.json",
        "icon": {
          "dark": "images/yocto-file-icon.svg",
          "light": "images/yocto-file-icon.svg"
        }
      }
    ],
    "grammars": [
      {
        "language": "bitbake",
        "scopeName": "source.bb",
        "path": "./syntaxes/bitbake.tmLanguage.json"
      }
    ],
    "semanticTokenScopes": [
      {
        "language": "bitbake",
        "scopes": {
          "operator.readonly": ["keyword.other.bitbake-operator.bb"]
        }
      }
    ],
    "configuration": {
      "type": "object",
      "title": "BitBake",
      "properties": {
        "bitbake.loggingLevel": {
          "type": "string",
          "enum": [
            "error",
            "info",
            "debug"
          ],
          "default": "error",
          "description": "Adjust the logging level: 'error' for reporting only errors, 'info' for displaying information useful to the user, and 'debug' for the same information as 'info,' but with additional debugging details."
        },
        "bitbake.shouldDeepExamine": {
          "type": "boolean",
          "default": false,
          "description": "Activate deep examination. If a recipe exports an additional package with a different name than the recipe file, the normal scan will not detect these packages. To find these packages, you need to activate this option."
        },
        "bitbake.parseOnSave": {
          "type": "boolean",
          "default": true,
          "description": "Activate parsing on save. When a recipe is saved, bitbake will automatically be run to parse it."
        },
        "bitbake.pathToEnvScript": {
          "type": "string",
          "examples": ["${workspaceFolder}/sources/poky/oe-init-build-env"],
          "description": "Set the path to the environment script to configure the BitBake project. Optional, see the commandWrapper setting.\nExample: '${workspaceFolder}/sources/poky/oe-init-build-env'"
        },
        "bitbake.pathToBuildFolder": {
          "type": "string",
          "examples": ["${workspaceFolder}/build"],
          "description": "Set the build folder for the BitBake project. Optional, see the commandWrapper setting.\nExample: '${workspaceFolder}/build'"
        },
        "bitbake.pathToBitbakeFolder": {
          "type": "string",
          "default": "${workspaceFolder}/sources/poky/bitbake",
          "description": "Set the path to the BitBake folder. Used to provide Python embedded language features."
        },
        "bitbake.commandWrapper": {
          "type": "string",
          "examples": [
            "docker run --rm -v ${workspaceFolder}:${workspaceFolder} crops/poky --workdir=${workspaceFolder} /bin/bash -c",
            "kas shell -c",
            "cqfd run",
            "${workspaceFolder}/build.sh --"
          ],
          "description": "An optional build tool command to wrap around BitBake commands.\n\nVarious tools provide ways to automatically configure the BitBake environment, or even call it inside containers. This option allows you to use them through this extension by wrapping around the bitbake invocation.\nThe resulting commands generated by this extension will be for example:\n $ commandWrapper 'bitbake core-image-minimal'\nOr, if pathToEnvScript and pathToBuildFolder are defined:\n $ commandWrapper '. pathToEnvScript pathToBuildFolder && bitbake core-image-minimal'\n\nSee examples:\n'docker run --rm -v ${workspaceFolder}:${workspaceFolder} crops/poky --workdir=${workspaceFolder} /bin/bash -c'\n'kas shell -c'\n'cqfd run'\n'${workspaceFolder}/build.sh --'"
        },
        "bitbake.workingDirectory": {
          "type": "string",
          "default": "${workspaceFolder}",
          "description": "Set the working directory for running BitBake command."
        },
        "bitbake.shellEnv": {
          "type": "object",
          "default": {},
          "description": "Environment variables to set before running the BitBake command."
        }
      }
    },
    "taskDefinitions": [
      {
        "type": "bitbake",
        "properties": {
          "recipes": {
            "description": "Bitbake recipe(s)",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "task": {
            "type": "string",
            "description": "Bitbake task to run (build by default)"
          },
          "options": {
            "type": "object",
            "description": "Additional options to pass to the bitbake command",
            "properties": {
              "continue": {
                "type": "boolean",
                "description": "Continue as much as possible after an error (-k)"
              },
              "force": {
                "type": "boolean",
                "description": "Force the specified targets/task to run (-f)."
              },
              "parseOnly": {
                "type": "boolean",
                "description": "Run bitbake in parse-only mode (-p)."
              }
            }
          }
        }
      }
    ],
    "problemMatchers": [
      {
        "name": "bitbake-ParseError",
        "source": "bitbake",
        "owner": "bitbake",
        "fileLocation": [
          "autoDetect",
          "${cwd}"
        ],
        "pattern": {
          "regexp": "^.*ParseError (at|in) (.+?):(\\d+)?:? (.+)$",
          "file": 2,
          "line": 3,
          "message": 4
        }
      },
      {
        "name": "bitbake-UnableToParse",
        "source": "bitbake",
        "owner": "bitbake",
        "fileLocation": [
          "autoDetect",
          "${cwd}"
        ],
        "pattern": {
          "regexp": "^ERROR: (Unable to parse) (.+)$",
          "file": 2,
          "message": 1,
          "kind": "File"
        }
      },
      {
        "name": "bitbake-Variable",
        "source": "bitbake",
        "owner": "bitbake",
        "fileLocation": [
          "autoDetect",
          "${cwd}"
        ],
        "pattern": {
          "regexp": "^Parsing recipes...(ERROR): (.+?): (.*?) file: (.+) line: (\\d+) (.*)$",
          "file": 2,
          "line": 5,
          "severity": 1,
          "message": 6
        }
      },
      {
        "name": "bitbake-generic",
        "source": "bitbake",
        "owner": "bitbake",
        "fileLocation": [
          "autoDetect",
          "${cwd}"
        ],
        "pattern": {
          "regexp": "^Parsing recipes...(ERROR): (.+?): (.*)$",
          "file": 2,
          "severity": 1,
          "message": 3
        }
      },
      {
        "name": "bitbake-task-error",
        "source": "bitbake",
        "owner": "bitbake",
        "fileLocation": [
          "autoDetect",
          "${cwd}"
        ],
        "pattern": {
          "regexp": "^(ERROR): Task \\((.*):(.*\\) .*)$",
          "file": 2,
          "message": 3,
          "severity": 1
        }
      }
    ],
    "commands": [
      {
        "command": "bitbake.rescan-project",
        "title": "BitBake: Rescan Project",
        "description": "This command rescans the bitbake project.",
        "icon": "$(refresh)"
      },
      {
        "command": "bitbake.build-recipe",
        "title": "BitBake: Build recipe",
        "description": "Build a recipe or an image.",
        "icon": "$(gear)"
      },
      {
        "command": "bitbake.clean-recipe",
        "title": "BitBake: Clean recipe",
        "description": "Clean a recipe or an image (bitbake -c clean).",
        "icon": "$(exclude)"
      },
      {
        "command": "bitbake.run-task",
        "title": "BitBake: Run task for recipe",
        "description": "Run a specific task for a bitbake recipe."
      },
      {
        "command": "bitbake.drop-recipe",
        "title": "BitBake: Drop a recipe from the active workspace",
        "description": "Stop watching or suggesting a recipe in bitbake commands.",
        "icon": "$(close)"
      },
      {
        "command": "bitbake.watch-recipe",
        "title": "BitBake: Add a recipe to the active workspace",
        "description": "Start watching or suggesting a recipe in bitbake commands."
      },
      {
        "command": "bitbake.parse-recipes",
        "title": "BitBake: Parse all recipes",
        "description": "This command runs bitbake in parse-only mode."
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "bitbakeView",
          "title": "Bitbake",
          "icon": "images/yocto-view-icon.svg"
        }
      ]
    },
    "views": {
      "bitbakeView": [
        {
          "id": "bitbakeRecipes",
          "name": "Recipes Explorer",
          "contextualTitle": "Recipes explorer",
          "icon": "$(library)",
          "when": "bitbake.active"
        }
      ]
    },
    "submenus": [
      {
        "id": "bitbake/main",
        "label": "BitBake"
      }
    ],
    "menus": {
      "bitbake/main": [
        {
          "command": "bitbake.clean-recipe",
          "group": "bitbake_recipe@1"
        },
        {
          "command": "bitbake.build-recipe",
          "group": "bitbake_recipe@0"
        },
        {
          "command": "bitbake.run-task",
          "group": "bitbake_recipe@2"
        }
      ],
      "explorer/context": [
        {
          "submenu": "bitbake/main",
          "group": "bitbake",
          "when": "resourceLangId == bitbake"
        }
      ],
      "editor/context": [
        {
          "submenu": "bitbake/main",
          "group": "bitbake",
          "when": "editorLangId == bitbake"
        }
      ],
      "editor/title/context": [
        {
          "submenu": "bitbake/main",
          "group": "bitbake",
          "when": "resourceLangId == bitbake"
        }
      ],
      "view/title": [
        {
          "command": "bitbake.rescan-project",
          "group": "navigation@0",
          "when": "view == bitbakeRecipes"
        }
      ],
      "view/item/context": [
        {
          "command": "bitbake.clean-recipe",
          "group": "bitbake_recipe@1",
          "when": "view == bitbakeRecipeCtx"
        },
        {
          "command": "bitbake.build-recipe",
          "group": "bitbake_recipe@0",
          "when": "viewItem == bitbakeRecipeCtx"
        },
        {
          "command": "bitbake.run-task",
          "group": "bitbake_recipe@2",
          "when": "viewItem == bitbakeRecipeCtx"
        },
        {
          "command": "bitbake.drop-recipe",
          "group": "bitbake_recipe@3",
          "when": "viewItem == bitbakeRecipeCtx"
        },
        {
          "command": "bitbake.build-recipe",
          "group": "inline@0",
          "when": "viewItem == bitbakeRecipeCtx"
        },
        {
          "command": "bitbake.clean-recipe",
          "group": "inline@1",
          "when": "viewItem == bitbakeRecipeCtx"
        },
        {
          "command": "bitbake.drop-recipe",
          "group": "inline@2",
          "when": "viewItem == bitbakeRecipeCtx"
        }
      ]
    }
  },
  "scripts": {
    "test": "npm run test:grammar",
    "test:grammar": "vscode-tmgrammar-test ./test/grammars/test-cases/*.bb",
    "snap-grammar": "vscode-tmgrammar-snap ./test/grammars/snaps/*.bb -u",
    "vscode:prepublish": "npm install --omit=dev && cd ../server && npm install --omit=dev && npm run installServer",
    "package": "npm run vscode:prepublish && vsce package"
  },
  "dependencies": {
    "find": "^0.2.7",
    "vscode-languageclient": "^8.1.0"
  },
  "devDependencies": {
    "@types/node": "^20.6.2",
    "@types/find": "^0.2.2",
    "@types/vscode": "^1.75.1"
  },
  "workspaces": [
    "src/lib"
  ],
  "vsce": {
    "baseContentUrl": "https://github.com/yoctoproject/vscode-bitbake/raw/HEAD/client",
    "baseImageUrl": "https://github.com/yoctoproject/vscode-bitbake/raw/HEAD/client"
  }
}
